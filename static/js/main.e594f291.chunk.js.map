{"version":3,"sources":["components/Scroll.js","components/ErrorBoundry.js","components/Cardlist.js","components/Searchbox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","Cardlist","fromApp","Error","Searchbox","className","type","placeholder","onChange","searchChange","App","onSearchChange","event","searchfield","target","value","robots","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"iPAUeA,EARA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,WCkBJC,E,YApBX,WAAYN,GAAQ,IAAD,8BACnB,4CAAMA,KACDO,MAAQ,CACTC,UAAU,GAHK,E,+EAOLC,EAAMC,GACpBC,KAAKC,SAAU,CAACJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SACL,wDAEHG,KAAKX,MAAMK,a,GAjBKQ,aCsBZC,EArBE,SAACC,GAGb,MAAM,IAAIC,MAAM,aCUNC,EAdG,SAACF,GAEf,OACQ,yBAAKG,UAAU,UACX,2BACAA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUN,EAAQO,iBC2CnBC,E,YA7CX,aAAe,IAAD,8BACV,+CAcJC,eAAiB,SAACC,GACd,EAAKb,SAAS,CACVc,YAAaD,EAAME,OAAOC,SAf9B,EAAKrB,MAAQ,CACTsB,OAAS,GACTH,YAAa,IAJP,E,iFAQM,IAAD,OACdI,MAAM,8CACNC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKtB,SAAS,CAACiB,OAAQK,S,+BAShC,IAAD,OACCC,EACNxB,KAAKJ,MAAMsB,OAAOO,QAAO,SAAAC,GAAS,OAAOA,EAAMC,KAAKC,cAAcC,SAAS,EAAKjC,MAAMmB,YAAYa,kBAElG,OAAiC,IAA7B5B,KAAKJ,MAAMsB,OAAOY,OACX,uCAIP,kBAAC,WAAD,KACA,yBAAKvB,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWI,aAAcX,KAAKa,iBAC3B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACP,kBAAC,EAAD,CAAUK,OAAQM,Y,GApChBO,IAAM7B,WCKJ8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhD,GACLiD,QAAQjD,MAAMA,EAAMkD,a","file":"static/js/main.e594f291.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '900px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        hasError: false\r\n    }\r\n}\r\n\r\ncomponentDidCatch(error,info) {\r\n    this.setState( {hasError: true })\r\n}\r\n\r\nrender() {\r\n\r\n    if (this.state.hasError) {\r\n       return <h1> Ooops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n}\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport Card from './Card'// uses card component\r\n\r\nconst Cardlist = (fromApp) => {//the cardlist gets input form the App component which is the array with the filtered robots\r\n //   const { robots, fake} = fromApp;\r\n if (true) {\r\n     throw new Error('neeeeee!')\r\n }\r\n    return (\r\n        //loops the array per line and sends every line to the card component\r\n             fromApp.robots.map((entry,i) =>{\r\n                return (\r\n                    <Card \r\n                    key={i} //key is needed when using array in react\r\n                    id={fromApp.robots[i].id} // sends id to card component\r\n                    name={fromApp.robots[i].name} // sends name to card component\r\n                    email={fromApp.robots[i].email}// sends email to card component\r\n                    />\r\n                );\r\n            })\r\n             \r\n    );\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox = (fromApp) => {\r\n //   const { searchfield, searchChange } = fromApp;\r\n    return (\r\n            <div className='tc pd2'>\r\n                <input \r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search-robots' \r\n                onChange={fromApp.searchChange} // when a field is changed, run the function searchchange from the App component\r\n                />\r\n            </div>    \r\n            );\r\n}\r\n\r\nexport default Searchbox;","import React, { Fragment } from 'react';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Cardlist from '../components/Cardlist';// shares props with cardlsit, and uses the output from cardlist\r\nimport Searchbox from '../components/Searchbox';// shares props with searchbox, and uses the output from searchbox\r\n//import { robots } from './robots';  // we need the {} because the robots.js can export multiple outputs; uses the robot object to send info to other \r\n\r\nclass App extends React.Component {\r\n    constructor() {// constructor is the part which is run first when the App is called\r\n        super()//super makes sure the constructor is run first\r\n        this.state = { // reads input from searchfield and uses this to send a filtered array to the cardlist component\r\n            robots : [],//\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){// make a call to website\r\n         fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json()) // convert the response into a json\r\n        .then(users => this.setState({robots: users})); // fill the robots array with the users\r\n    }\r\n\r\n    // the first real function/method in the App class\r\n    onSearchChange = (event) => { // the \"=\" and the \"=>\" are needed everytime when you make your own method in a component (otherwise the \"this.\"\" will not point to the main component, but to the component where the event happens = input in the searchbox component is this example)\r\n        this.setState({ // setState function is always needed to update state\r\n            searchfield: event.target.value // searchfield becomes the value entered in the searchbox component\r\n        }) }\r\n\r\n    render() {\r\n        const filteredRobots = \r\n        this.state.robots.filter(robot =>{return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());})\r\n        //the array filtered robots only holds the lines that contain the string from the searchbox, the array is send to the cardlist\r\n        if (this.state.robots.length === 0 ) { // check if the robots are loaded, if not show loading\r\n            return <h1>Loading</h1>\r\n        }\r\n        else{ // otherwise show the robots\r\n        return(\r\n            <Fragment>\r\n            <div className='tc'>\r\n                <h1 className='f1'>Robofriends</h1>\r\n                <Searchbox searchChange={this.onSearchChange}/>\r\n                   <Scroll>\r\n                       <ErrorBoundry>\r\n                <Cardlist robots={filteredRobots}/> \r\n                </ErrorBoundry>\r\n                    </Scroll>\r\n            </div>\r\n            </Fragment>\r\n        );\r\n    \r\n    } \r\n}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './containers/App.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));// execute the App.js (and all it's sub components) in the div of the index.html with the div with id=root\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}